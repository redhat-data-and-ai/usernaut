// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/ldap/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ldap "github.com/go-ldap/ldap/v3"
	gomock "github.com/golang/mock/gomock"
)

// MockLDAPConnClient is a mock of LDAPConnClient interface.
type MockLDAPConnClient struct {
	ctrl     *gomock.Controller
	recorder *MockLDAPConnClientMockRecorder
}

// MockLDAPConnClientMockRecorder is the mock recorder for MockLDAPConnClient.
type MockLDAPConnClientMockRecorder struct {
	mock *MockLDAPConnClient
}

// NewMockLDAPConnClient creates a new mock instance.
func NewMockLDAPConnClient(ctrl *gomock.Controller) *MockLDAPConnClient {
	mock := &MockLDAPConnClient{ctrl: ctrl}
	mock.recorder = &MockLDAPConnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLDAPConnClient) EXPECT() *MockLDAPConnClientMockRecorder {
	return m.recorder
}

// IsClosing mocks base method.
func (m *MockLDAPConnClient) IsClosing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosing indicates an expected call of IsClosing.
func (mr *MockLDAPConnClientMockRecorder) IsClosing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosing", reflect.TypeOf((*MockLDAPConnClient)(nil).IsClosing))
}

// Search mocks base method.
func (m *MockLDAPConnClient) Search(arg0 *ldap.SearchRequest) (*ldap.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(*ldap.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLDAPConnClientMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLDAPConnClient)(nil).Search), arg0)
}

// MockLDAPClient is a mock of LDAPClient interface.
type MockLDAPClient struct {
	ctrl     *gomock.Controller
	recorder *MockLDAPClientMockRecorder
}

// MockLDAPClientMockRecorder is the mock recorder for MockLDAPClient.
type MockLDAPClientMockRecorder struct {
	mock *MockLDAPClient
}

// NewMockLDAPClient creates a new mock instance.
func NewMockLDAPClient(ctrl *gomock.Controller) *MockLDAPClient {
	mock := &MockLDAPClient{ctrl: ctrl}
	mock.recorder = &MockLDAPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLDAPClient) EXPECT() *MockLDAPClientMockRecorder {
	return m.recorder
}

// GetUserLDAPData mocks base method.
func (m *MockLDAPClient) GetUserLDAPData(ctx context.Context, userID string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLDAPData", ctx, userID)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLDAPData indicates an expected call of GetUserLDAPData.
func (mr *MockLDAPClientMockRecorder) GetUserLDAPData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLDAPData", reflect.TypeOf((*MockLDAPClient)(nil).GetUserLDAPData), ctx, userID)
}
