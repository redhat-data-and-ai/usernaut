// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	structs "github.com/redhat-data-and-ai/usernaut/pkg/common/structs"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddUserToTeam mocks base method.
func (m *MockClient) AddUserToTeam(ctx context.Context, teamID string, userIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToTeam", ctx, teamID, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToTeam indicates an expected call of AddUserToTeam.
func (mr *MockClientMockRecorder) AddUserToTeam(ctx, teamID, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToTeam", reflect.TypeOf((*MockClient)(nil).AddUserToTeam), ctx, teamID, userIDs)
}

// CreateTeam mocks base method.
func (m *MockClient) CreateTeam(ctx context.Context, team *structs.Team) (*structs.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, team)
	ret0, _ := ret[0].(*structs.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockClientMockRecorder) CreateTeam(ctx, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockClient)(nil).CreateTeam), ctx, team)
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(ctx context.Context, u *structs.User) (*structs.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(*structs.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), ctx, u)
}

// DeleteTeamByID mocks base method.
func (m *MockClient) DeleteTeamByID(ctx context.Context, teamID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamByID", ctx, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamByID indicates an expected call of DeleteTeamByID.
func (mr *MockClientMockRecorder) DeleteTeamByID(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamByID", reflect.TypeOf((*MockClient)(nil).DeleteTeamByID), ctx, teamID)
}

// DeleteUser mocks base method.
func (m *MockClient) DeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClientMockRecorder) DeleteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClient)(nil).DeleteUser), ctx, userID)
}

// FetchAllTeams mocks base method.
func (m *MockClient) FetchAllTeams(ctx context.Context) (map[string]structs.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllTeams", ctx)
	ret0, _ := ret[0].(map[string]structs.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllTeams indicates an expected call of FetchAllTeams.
func (mr *MockClientMockRecorder) FetchAllTeams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllTeams", reflect.TypeOf((*MockClient)(nil).FetchAllTeams), ctx)
}

// FetchAllUsers mocks base method.
func (m *MockClient) FetchAllUsers(ctx context.Context) (map[string]*structs.User, map[string]*structs.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllUsers", ctx)
	ret0, _ := ret[0].(map[string]*structs.User)
	ret1, _ := ret[1].(map[string]*structs.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchAllUsers indicates an expected call of FetchAllUsers.
func (mr *MockClientMockRecorder) FetchAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllUsers", reflect.TypeOf((*MockClient)(nil).FetchAllUsers), ctx)
}

// FetchTeamDetails mocks base method.
func (m *MockClient) FetchTeamDetails(ctx context.Context, teamID string) (*structs.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTeamDetails", ctx, teamID)
	ret0, _ := ret[0].(*structs.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTeamDetails indicates an expected call of FetchTeamDetails.
func (mr *MockClientMockRecorder) FetchTeamDetails(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTeamDetails", reflect.TypeOf((*MockClient)(nil).FetchTeamDetails), ctx, teamID)
}

// FetchTeamMembersByTeamID mocks base method.
func (m *MockClient) FetchTeamMembersByTeamID(ctx context.Context, teamID string) (map[string]*structs.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTeamMembersByTeamID", ctx, teamID)
	ret0, _ := ret[0].(map[string]*structs.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTeamMembersByTeamID indicates an expected call of FetchTeamMembersByTeamID.
func (mr *MockClientMockRecorder) FetchTeamMembersByTeamID(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTeamMembersByTeamID", reflect.TypeOf((*MockClient)(nil).FetchTeamMembersByTeamID), ctx, teamID)
}

// FetchUserDetails mocks base method.
func (m *MockClient) FetchUserDetails(ctx context.Context, userID string) (*structs.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserDetails", ctx, userID)
	ret0, _ := ret[0].(*structs.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserDetails indicates an expected call of FetchUserDetails.
func (mr *MockClientMockRecorder) FetchUserDetails(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserDetails", reflect.TypeOf((*MockClient)(nil).FetchUserDetails), ctx, userID)
}

// RemoveUserFromTeam mocks base method.
func (m *MockClient) RemoveUserFromTeam(ctx context.Context, teamID string, userIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromTeam", ctx, teamID, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromTeam indicates an expected call of RemoveUserFromTeam.
func (mr *MockClientMockRecorder) RemoveUserFromTeam(ctx, teamID, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromTeam", reflect.TypeOf((*MockClient)(nil).RemoveUserFromTeam), ctx, teamID, userIDs)
}
